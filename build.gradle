plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.createver'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    // 기본 스프링 및 보안 관련 의존성
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // AWS, OpenAPI, Redis 등 추가 의존성
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.470'
    implementation 'com.amazonaws:aws-java-sdk-translate:1.12.118'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Querydsl 설정
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // 로깅
    implementation "ca.pjer:logback-awslogs-appender:1.6.0"

    // Spring REST docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // Lombok 및 테스트 관련 의존성
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testRuntimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.mockito:mockito-inline:4.6.1"
    testImplementation 'org.springframework.security:spring-security-test'
}

// Querydsl QClass 파일 생성 위치 지정 및 설정
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

// 테스트 및 JaCoCo 설정

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
    finalizedBy 'jacocoTestReport'
}
jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            "**/Q*",
                            "**/*Dto*",
                            "**/*Request*",
                            "**/*Response*",
                            "**/*Responder*",
                            "**/*Application*",
                            "**/*Config*",
                            "**/*Exception*",
                            "**/*Validator*",
                            "**/log/*",
                            "**/health/*"
                    ])
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'BUNDLE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }
            excludes = [
                    "**.Q*",
                    "**.*Dto*",
                    "**.*Request*",
                    "**.*Response*",
                    "**.*Responder*",
                    "**.*Application*",
                    "**.*Config*",
                    "**.*Exception*",
                    "**.*Validator*",
                    "**.log.*",
                    "**.health.*"
            ]
        }
    }
}
asciidoctor {
    baseDirFollowsSourceDir()
    inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
    outputDir file("${buildDir}/asciidoc/html5")
}

task copyDocs(type: Copy) {
    dependsOn asciidoctor
    from file("${asciidoctor.outputDir}")
   	into file("src/main/resources/static/docs")
}

// BootJar 설정
bootJar {
    archiveFileName = 'app.jar'
    dependsOn copyDocs
    from ("${asciidoctor.outputDir}") {
   		into 'static/docs'
   	}
}
