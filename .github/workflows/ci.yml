name: CI

on:
  pull_request:
    branches: [ "main" ]

permissions:
  checks: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:

      - name: Runner 환경 Repository 세팅
        uses: actions/checkout@v3

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
              ~/.gradle/caches
              ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
              ${{ runner.os }}-gradle-

      - name: Gradle 명령 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle build
        run: ./gradlew build

      - name: Codecov 보고서 업로드
        uses: codecov/codecov-action@v3
        with:
          file: ./build/customJacocoReportDir/test/jacocoTestReport.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: 테스트 결과 PR에 코멘트 등록
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/*.xml'

      - name: 테스트 실패 시, 실패한 코드 라인에 Check 코멘트 등록
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/*.xml'
          token: ${{ github.token }}

      - name: 아티팩트 업로드
        uses: actions/upload-artifact@v3
        with:
          name: built-artifact
          path: build/libs/app.jar

  docker-build-and-push:
      needs: build-and-test
      runs-on: ubuntu-latest
      steps:

        - name: Runner 환경 Repository 세팅
          uses: actions/checkout@v3

        - name: 아티팩트 다운로드
          uses: actions/download-artifact@v3
          with:
            name: built-artifact
            path: build/libs

        - name: Docker 빌드 & GCR 푸시
          run: |
            echo "${{ secrets.GCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GITH_USERNAME }} --password-stdin
            docker build -t ghcr.io/${{ secrets.GITH_USERNAME }}/createver .
            docker push ghcr.io/${{ secrets.GITH_USERNAME }}/createver

  discord-notification:
        runs-on: ubuntu-latest
        if: always()
        needs: [ build-and-test, docker-build-and-push ]
        steps:
          - name: Discord 알림
            uses: sarisia/actions-status-discord@v1
            if: always()
            with:
              webhook: ${{ secrets.DISCORD_WEBHOOK }}